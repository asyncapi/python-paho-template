{%- macro modelClass(name, schema, properties, required, indentLevel) %}
{%- set className = name | upperFirst %}
{% set indent1 = indentLevel | indent1 -%}
{% set indent2 = indentLevel | indent2 -%}
{% set indent3 = indentLevel | indent3 -%}
{% set indent4 = indentLevel | indent4 -%}

{{ indent1 }}class {{name | upperFirst}}(Entity):

{{indent2}}def __init__(
{{ indent4 }}self
{%- for name, prop in properties -%}
{%- set pythonName = name | identifierName -%}
,
{{ indent4 }}{{ pythonName }}
{%- endfor -%}
):
{%- for name, prop in properties -%}
{%- set pythonName = name | identifierName %}
{{ indent3}}self.{{pythonName}} = {{pythonName}}
{%- endfor %}

{% for name, prop in properties -%}
{%- set pythonName = name | identifierName %}
{%- set typeInfo = [name, pythonName, prop] | determineType -%}
{%- if typeInfo.generalType === 'object' -%}
{{ modelClass(pythonName, null, prop.properties(), prop.required(), indentLevel+1) }}
{%- elif typeInfo.generalType === 'enum' %}
{{ indent2 }}class {{ typeInfo.type }}(str, Enum):
{% for v in typeInfo.enum -%}
{{ indent3 }}{{ v }} = '{{ v}}'
{% endfor -%}
{%- endif %}
{%- endfor %}
{% endmacro -%}
